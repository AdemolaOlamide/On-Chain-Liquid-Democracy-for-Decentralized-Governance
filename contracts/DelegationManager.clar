;; DelegationManager.clar

(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INVALID-DELEGATE u101)
(define-constant ERR-SELF-DELEGATION u102)
(define-constant ERR-DELEGATION-CYCLE u103)
(define-constant ERR-MAX-DEPTH-EXCEEDED u104)
(define-constant ERR-INVALID-MAX-DEPTH u105)
(define-constant ERR-DELEGATION-ALREADY-SET u106)
(define-constant ERR-NO-DELEGATION u107)
(define-constant ERR-INVALID-TIMESTAMP u108)
(define-constant ERR-AUTHORITY-NOT-VERIFIED u109)
(define-constant ERR-INVALID-EXPIRATION u110)
(define-constant ERR-EXPIRED-DELEGATION u111)
(define-constant ERR-INVALID-REASON u112)
(define-constant ERR-MAX-HISTORY-EXCEEDED u113)
(define-constant ERR-INVALID-UPDATE-PARAM u114)
(define-constant ERR-INVALID-STATUS u115)
(define-constant ERR-INVALID-VOTER u116)
(define-constant ERR-INVALID-POWER u117)
(define-constant ERR-DELEGATION-LOCKED u118)
(define-constant ERR-INVALID-LOCK-PERIOD u119)
(define-constant ERR-INVALID-ADMIN u120)

(define-data-var admin principal tx-sender)
(define-data-var max-depth uint u10)
(define-data-var min-lock-period uint u144)
(define-data-var max-history uint u5)
(define-data-var authority-contract (optional principal) none)

(define-map delegations principal (optional principal))
(define-map delegation-timestamps principal uint)
(define-map delegation-expirations principal uint)
(define-map delegation-reasons principal (string-utf8 256))
(define-map delegation-statuses principal bool)
(define-map delegation-histories principal (list 5 (tuple (delegate principal) (timestamp uint))))
(define-map delegation-locks principal uint)
(define-map effective-powers principal uint)

(define-trait voter-registry-trait
  (
    (get-voting-power (principal) (response uint uint))
    (is-registered (principal) (response bool uint))
  )
)

(define-read-only (get-delegation (voter principal))
  (map-get? delegations voter)
)

(define-read-only (get-delegation-timestamp (voter principal))
  (map-get? delegation-timestamps voter)
)

(define-read-only (get-delegation-expiration (voter principal))
  (map-get? delegation-expirations voter)
)

(define-read-only (get-delegation-reason (voter principal))
  (map-get? delegation-reasons voter)
)

(define-read-only (get-delegation-status (voter principal))
  (map-get? delegation-statuses voter)
)

(define-read-only (get-delegation-history (voter principal))
  (map-get? delegation-histories voter)
)

(define-read-only (get-delegation-lock (voter principal))
  (map-get? delegation-locks voter)
)

(define-read-only (get-effective-power (voter principal))
  (map-get? effective-powers voter)
)

(define-private (validate-principal (principal-to-check principal))
  (if (not (is-eq principal-to-check 'SP000000000000000000002Q6VF78))
    (ok true)
    (err ERR-INVALID-DELEGATE)
  )
)

(define-private (validate-delegate (delegatee principal))
  (begin
    (try! (validate-principal delegatee))
    (if (is-eq delegatee tx-sender)
      (err ERR-SELF-DELEGATION)
      (ok true)
    )
  )
)

(define-private (validate-depth (depth uint))
  (if (<= depth (var-get max-depth))
    (ok true)
    (err ERR-MAX-DEPTH-EXCEEDED)
  )
)

(define-private (validate-expiration (expiration uint))
  (if (> expiration block-height)
    (ok true)
    (err ERR-INVALID-EXPIRATION)
  )
)

(define-private (validate-reason (reason (string-utf8 256)))
  (if (<= (len reason) u256)
    (ok true)
    (err ERR-INVALID-REASON)
  )
)

(define-private (validate-lock-period (period uint))
  (if (>= period (var-get min-lock-period))
    (ok true)
    (err ERR-INVALID-LOCK-PERIOD)
  )
)

(define-private (validate-admin (caller principal))
  (if (is-eq caller (var-get admin))
    (ok true)
    (err ERR-INVALID-ADMIN)
  )
)

(define-private (validate-authority)
  (match (var-get authority-contract)
    some-authority (ok some-authority)
    (err ERR-AUTHORITY-NOT-VERIFIED)
  )
)

(define-private (is-delegation-active (voter principal))
  (let ((expiration (default-to u0 (map-get? delegation-expirations voter))))
    (if (and (is-some (map-get? delegations voter)) (> expiration block-height))
      (ok true)
      (err ERR-EXPIRED-DELEGATION)
    )
  )
)

(define-private (detect-cycle (voter principal) (visited (list 10 principal)))
  (if (is-some (index-of visited voter))
    (err ERR-DELEGATION-CYCLE)
    (ok visited)
  )
)

(define-private (resolve-delegate (voter principal) (depth uint) (visited (list 10 principal)))
  (begin
    (try! (validate-depth depth))
    (try! (detect-cycle voter visited))
    (match (map-get? delegations voter)
      some-delegate (resolve-delegate some-delegate (+ depth u1) (unwrap-panic (as-max-len? (append visited voter) u10)))
      voter
    )
  )
)

(define-public (set-authority-contract (contract-principal principal))
  (begin
    (try! (validate-admin tx-sender))
    (try! (validate-principal contract-principal))
    (var-set authority-contract (some contract-principal))
    (ok true)
  )
)

(define-public (set-max-depth (new-depth uint))
  (begin
    (try! (validate-admin tx-sender))
    (asserts! (> new-depth u0) (err ERR-INVALID-MAX-DEPTH))
    (var-set max-depth new-depth)
    (ok true)
  )
)

(define-public (set-min-lock-period (new-period uint))
  (begin
    (try! (validate-admin tx-sender))
    (asserts! (> new-period u0) (err ERR-INVALID-LOCK-PERIOD))
    (var-set min-lock-period new-period)
    (ok true)
  )
)

(define-public (set-max-history (new-max uint))
  (begin
    (try! (validate-admin tx-sender))
    (asserts! (> new-max u0) (err ERR-INVALID-UPDATE-PARAM))
    (var-set max-history new-max)
    (ok true)
  )
)

(define-public (delegate-vote (delegatee principal) (expiration uint) (reason (string-utf8 256)) (lock-period uint))
  (begin
    (try! (validate-delegate delegatee))
    (try! (validate-expiration expiration))
    (try! (validate-reason reason))
    (try! (validate-lock-period lock-period))
    (try! (validate-authority))
    (asserts! (is-none (map-get? delegations tx-sender)) (err ERR-DELEGATION-ALREADY-SET))
    (map-set delegations tx-sender (some delegatee))
    (map-set delegation-timestamps tx-sender block-height)
    (map-set delegation-expirations tx-sender expiration)
    (map-set delegation-reasons tx-sender reason)
    (map-set delegation-statuses tx-sender true)
    (map-set delegation-locks tx-sender (+ block-height lock-period))
    (map-set delegation-histories tx-sender (list {delegate: delegatee, timestamp: block-height}))
    (print {event: "delegation-set", from: tx-sender, to: delegatee})
    (ok true)
  )
)

(define-public (revoke-delegation)
  (begin
    (try! (validate-authority))
    (asserts! (is-some (map-get? delegations tx-sender)) (err ERR-NO-DELEGATION))
    (let ((lock (default-to u0 (map-get? delegation-locks tx-sender))))
      (asserts! (>= block-height lock) (err ERR-DELEGATION-LOCKED))
    )
    (map-delete delegations tx-sender)
    (map-delete delegation-timestamps tx-sender)
    (map-delete delegation-expirations tx-sender)
    (map-delete delegation-reasons tx-sender)
    (map-delete delegation-statuses tx-sender)
    (map-delete delegation-locks tx-sender)
    (print {event: "delegation-revoked", from: tx-sender})
    (ok true)
  )
)

(define-public (update-delegation-reason (new-reason (string-utf8 256)))
  (begin
    (try! (validate-reason new-reason))
    (try! (is-delegation-active tx-sender))
    (map-set delegation-reasons tx-sender new-reason)
    (print {event: "delegation-reason-updated", from: tx-sender})
    (ok true)
  )
)

(define-public (extend-delegation-expiration (new-expiration uint))
  (begin
    (try! (validate-expiration new-expiration))
    (try! (is-delegation-active tx-sender))
    (map-set delegation-expirations tx-sender new-expiration)
    (print {event: "delegation-extended", from: tx-sender})
    (ok true)
  )
)

(define-public (get-delegate-chain (voter principal))
  (let ((chain (fold build-chain (list voter) (list voter))))
    (ok chain)
  )
)

(define-private (build-chain (current principal) (acc (list 10 principal)))
  (match (map-get? delegations current)
    some-delegate (unwrap-panic (as-max-len? (append acc some-delegate) u10))
    acc
  )
)

(define-read-only (get-effective-delegate (voter principal))
  (begin
    (try! (is-delegation-active voter))
    (let ((effective-delegate (resolve-delegate voter u0 (list ))))
      (ok effective-delegate)
    )
  )
)

(define-public (update-effective-power (voter principal) (registry <voter-registry-trait>))
  (begin
    (try! (validate-principal voter))
    (let ((power (unwrap! (contract-call? registry get-voting-power voter) (err ERR-INVALID-POWER))))
      (map-set effective-powers voter power)
      (ok power)
    )
  )
)

(define-public (toggle-delegation-status)
  (begin
    (try! (is-delegation-active tx-sender))
    (let ((current-status (default-to false (map-get? delegation-statuses tx-sender))))
      (map-set delegation-statuses tx-sender (not current-status))
      (ok (not current-status))
    )
  )
)

(define-public (add-to-history (delegatee principal))
  (begin
    (try! (is-delegation-active tx-sender))
    (try! (validate-principal delegatee))
    (let ((history (default-to (list ) (map-get? delegation-histories tx-sender))))
      (asserts! (< (len history) (var-get max-history)) (err ERR-MAX-HISTORY-EXCEEDED))
      (map-set delegation-histories tx-sender (unwrap-panic (as-max-len? (append history {delegate: delegatee, timestamp: block-height}) u5)))
      (ok true)
    )
  )
)

(define-read-only (get-admin)
  (ok (var-get admin))
)

(define-read-only (get-max-depth)
  (ok (var-get max-depth))
)

(define-read-only (get-min-lock-period)
  (ok (var-get min-lock-period))
)

(define-read-only (get-max-history)
  (ok (var-get max-history))
)

(define-read-only (get-authority-contract)
  (ok (var-get authority-contract))
)